name: Build all targets

on:
  push:
    branches:
    - 'main'
    - 'stable'
    - 'beta'
    - 'release/*'
  pull_request:
    branches:
    - '*'

jobs:
  group_targets:
    name: Scan for Board Targets
    runs-on: [runs-on,runner=1cpu-linux-x64,image=ubuntu22-full-x64,"run-id=${{ github.run_id }}"]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      timestamp: ${{ steps.set-timestamp.outputs.timestamp }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Python Dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "./Tools/setup/requirements.txt"

      - id: set-matrix
        name: Scan build directory and make matrix list
        run: echo "::set-output name=matrix::$(./Tools/generate_board_targets_json.py --group)"

      - id: set-timestamp
        name: Set timestamp for cache
        run: echo "::set-output name=timestamp::$(date +"%Y%m%d%H%M%S")"

  build:
    name: Building ${{ matrix.group }}
    runs-on: [runs-on,runner=16cpu-linux-x64,image=ubuntu22-full-x64,"run-id=${{ github.run_id }}"]
    needs: group_targets
    strategy:
      # matrix: ${{ fromJson(needs.group_targets.outputs.matrix) }}
      matrix:
        include:
          - container: px4io/px4-dev-base-focal:2021-09-08
            targets: px4_sitl_allyes,px4_sitl_default
            arch: base
            group: base-0
            len: 4
    container:
      image: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git Ownership Workaround
        run: git config --system --add safe.directory '*'

      - name: Cache Key Config
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ matrix.group }}-ccache-${{ needs.group_targets.outputs.timestamp }}
          restore-keys: ${{ matrix.group }}-ccache-${{ needs.group_targets.outputs.timestamp }}

      - name: Cache Conf Config
        run: |
            mkdir -p ~/.ccache
            echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
            echo "compression = true" >> ~/.ccache/ccache.conf
            echo "compression_level = 6" >> ~/.ccache/ccache.conf
            echo "max_size = 120M" >> ~/.ccache/ccache.conf
            echo "hash_dir = false" >> ~/.ccache/ccache.conf
            ccache -s
            ccache -z

      - name: Build Target Group
        run: |
            ./Tools/ci_build_all_runner.sh ${{matrix.targets}}

      - name: Upload Artifacts as Zip
        uses: actions/upload-artifact@v4
        with:
          name: px4_${{matrix.group}}_build_artifacts.zip
          path: |
            build/**/*.px4
            build/**/*.bin
          compression-level: 0

      - name: Cache Post-Run
        run: ccache -s

  sitl_tests:
    name: Running SITL Tests
    runs-on: [runs-on,runner=16cpu-linux-x64,image=ubuntu22-full-x64,"run-id=${{ github.run_id }}"]
    needs:
      - build
      - group_targets
    strategy:
      fail-fast: false
      matrix:
        config:
          - {model: "iris",          latitude:  "59.617693", longitude: "-151.145316", altitude:  "48", build_type: "RelWithDebInfo" } # Alaska
          - {model: "tailsitter" ,   latitude:  "29.660316", longitude:  "-82.316658", altitude:  "30", build_type: "RelWithDebInfo" } # Florida
          - {model: "standard_vtol", latitude:  "47.397742", longitude:    "8.545594", altitude: "488", build_type: "Coverage" } # Zurich
    container:
      image: px4io/px4-dev-simulation-focal:2021-09-08
      options: --privileged --ulimit core=-1 --security-opt seccomp=unconfined

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git Ownership Workaround
        run: git config --system --add safe.directory '*'

      - name: Cache Key Config
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: base-0-ccache-${{ needs.group_targets.outputs.timestamp }}
          restore-keys: base-0-ccache-${{ needs.group_targets.outputs.timestamp }}

      - name: Cache Conf Config
        run: |
            mkdir -p ~/.ccache
            echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
            echo "compression = true" >> ~/.ccache/ccache.conf
            echo "compression_level = 6" >> ~/.ccache/ccache.conf
            echo "max_size = 120M" >> ~/.ccache/ccache.conf
            echo "hash_dir = false" >> ~/.ccache/ccache.conf
            ccache -s
            ccache -z

      - name: Download MAVSDK
        run: wget "https://github.com/mavlink/MAVSDK/releases/download/v$(cat test/mavsdk_tests/MAVSDK_VERSION)/libmavsdk-dev_$(cat test/mavsdk_tests/MAVSDK_VERSION)_ubuntu20.04_amd64.deb"

      - name: Install MAVSDK
        run: dpkg -i "libmavsdk-dev_$(cat test/mavsdk_tests/MAVSDK_VERSION)_ubuntu20.04_amd64.deb"

      - name: Check PX4 Environment Variables
        env:
          PX4_HOME_LAT: ${{matrix.config.latitude}}
          PX4_HOME_LON: ${{matrix.config.longitude}}
          PX4_HOME_ALT: ${{matrix.config.altitude}}
          PX4_CMAKE_BUILD_TYPE: ${{matrix.config.build_type}}
        run: |
            export
            ulimit -a

      - name: Build PX4
        env:
          PX4_CMAKE_BUILD_TYPE: ${{matrix.config.build_type}}
        run: make px4_sitl_default

      - name: Cache Post-Run [px4_sitl_default]
        run: ccache -s

      - name: Build SITL Gazebo
        env:
          PX4_CMAKE_BUILD_TYPE: ${{matrix.config.build_type}}
        run: make px4_sitl_default sitl_gazebo-classic

      - name: Cache Post-Run [sitl_gazebo-classic]
        run: ccache -s

      - name: Build PX4 / MAVSDK tests
        env:
          PX4_CMAKE_BUILD_TYPE: ${{matrix.config.build_type}}
          DONT_RUN: 1
        run: make px4_sitl_default sitl_gazebo-classic mavsdk_tests

      - name: Cache Post-Run [px4_sitl_default sitl_gazebo-classic mavsdk_tests]
        run: ccache -s

      - name: Core Dump Settings
        run: |
            ulimit -c unlimited
            echo "`pwd`/%e.core" > /proc/sys/kernel/core_pattern

      - name: Run SITL / MAVSDK Tests
        env:
          PX4_HOME_LAT: ${{matrix.config.latitude}}
          PX4_HOME_LON: ${{matrix.config.longitude}}
          PX4_HOME_ALT: ${{matrix.config.altitude}}
          PX4_CMAKE_BUILD_TYPE: ${{matrix.config.build_type}}
        run: test/mavsdk_tests/mavsdk_test_runner.py --speed-factor 20 --abort-early --model ${{matrix.config.model}} --upload test/mavsdk_tests/configs/sitl.json --verbose
        timeout-minutes: 45

      - name: Upload failed logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-${{matrix.config.model}}-logs.zip
          path: logs/**/**/**/*.log # logs/date/vehicle/test/*.logs

      # - name: Setup tmate session
      #   if: failure()
      #   uses: mxschmitt/action-tmate@v3

      - name: Look at Core files
        if: failure() && ${{ hashFiles('px4.core') != '' }}
        run: gdb build/px4_sitl_default/bin/px4 px4.core -ex "thread apply all bt" -ex "quit"

      - name: Upload PX4 coredump
        if: failure() && ${{ hashFiles('px4.core') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coredump
          path: px4.core

      - name: Setup & Generate Coverage Report
        if: contains(matrix.config.build_type, 'Coverage')
        run: |
            git config --global credential.helper "" # disable the keychain credential helper
            git config --global --add credential.helper store # enable the local store credential helper
            echo "https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com" >> ~/.git-credentials # add credential
            git config --global url."https://github.com/".insteadof git@github.com: # credentials add credential
            mkdir -p coverage
            lcov --directory build/px4_sitl_default --base-directory build/px4_sitl_default --gcov-tool gcov --capture -o coverage/lcov.info

      - name: Upload Coverage Information to Codecov
        if: contains(matrix.config.build_type, 'Coverage')
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: mavsdk
          file: coverage/lcov.info
