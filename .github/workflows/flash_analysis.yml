name: FLASH usage analysis

permissions:
  pull-requests: write
  issues: write

on:
  push:
    branches:
      - 'main'
  pull_request_target:  # Changed from pull_request
    branches:
      - '*'

env:
  MIN_FLASH_POS_DIFF_FOR_COMMENT: 50
  MIN_FLASH_NEG_DIFF_FOR_COMMENT: -50

jobs:
  analyze_flash:
    name: Analyzing ${{ matrix.target }}
    runs-on: self-hosted
    container:
      image: px4io/px4-dev-nuttx-focal
    strategy:
      matrix:
        target: [px4_fmu-v5x, px4_fmu-v6x]
    outputs:
      px4_fmu-v5x-bloaty-output: ${{ steps.gen-output.outputs.px4_fmu-v5x-bloaty-output }}
      px4_fmu-v5x-bloaty-summary-map: ${{ steps.gen-output.outputs.px4_fmu-v5x-bloaty-summary-map }}
      px4_fmu-v6x-bloaty-output: ${{ steps.gen-output.outputs.px4_fmu-v6x-bloaty-output }}
      px4_fmu-v6x-bloaty-summary-map: ${{ steps.gen-output.outputs.px4_fmu-v6x-bloaty-summary-map }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event.pull_request.head.sha }}  # Checkout the PR's head commit

      - name: Git ownership workaround
        run: git config --system --add safe.directory '*'

      - name: Build Target
        run: make ${{ matrix.target }}_flash-analysis

      - name: Store the ELF with the change
        run: cp ./build/**/*.elf ./with-change.elf

      - name: Clean previous build
        run: |
          make clean
          make distclean

      - name: If it's a PR checkout the base branch
        if: ${{ github.event.pull_request }}
        run: git checkout ${{ github.event.pull_request.base.ref }}

      - name: If it's a push checkout the previous commit
        if: github.event_name == 'push'
        run: git checkout ${{ github.event.before }}

      - name: Update submodules
        run: make submodulesupdate

      - name: Build
        run: make ${{ matrix.target }}_flash-analysis

      - name: Store the ELF before the change
        run: cp ./build/**/*.elf ./before-change.elf

      - name: bloaty-action
        uses: PX4/bloaty-action@v1.0.0
        id: bloaty-step
        with:
          bloaty-file-args: ./with-change.elf -- ./before-change.elf
          bloaty-additional-args: -d sections,compileunits -s vm -n 20
          output-to-summary: true

      - name: Generate output
        id: gen-output
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "${{ matrix.target }}-bloaty-output<<$EOF" >> $GITHUB_OUTPUT
          echo "${{ steps.bloaty-step.outputs.bloaty-output-encoded }}" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          echo "${{ matrix.target }}-bloaty-summary-map<<$EOF" >> $GITHUB_OUTPUT
          echo '${{ steps.bloaty-step.outputs.bloaty-summary-map }}' >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

  post_pr_comment:
    name: Publish Results
    runs-on: self-hosted
    needs: [analyze_flash]
    env:
      V5X-SUMMARY-MAP-ABS: ${{ fromJSON(fromJSON(needs.analyze_flash.outputs.px4_fmu-v5x-bloaty-summary-map).vm-absolute) }}
      V5X-SUMMARY-MAP-PERC: ${{ fromJSON(fromJSON(needs.analyze_flash.outputs.px4_fmu-v5x-bloaty-summary-map).vm-percentage) }}
      V6X-SUMMARY-MAP-ABS: ${{ fromJSON(fromJSON(needs.analyze_flash.outputs.px4_fmu-v6x-bloaty-summary-map).vm-absolute) }}
      V6X-SUMMARY-MAP-PERC: ${{ fromJSON(fromJSON(needs.analyze_flash.outputs.px4_fmu-v6x-bloaty-summary-map).vm-percentage) }}
    if: ${{ github.event.pull_request }}
    steps:
      - name: Set Build Time
        id: bt
        run: |
          echo "timestamp=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Create or update comment
        if: |
          env.V5X-SUMMARY-MAP-ABS >= fromJSON(env.MIN_FLASH_POS_DIFF_FOR_COMMENT) ||
          env.V5X-SUMMARY-MAP-ABS <= fromJSON(env.MIN_FLASH_NEG_DIFF_FOR_COMMENT) ||
          env.V6X-SUMMARY-MAP-ABS >= fromJSON(env.MIN_FLASH_POS_DIFF_FOR_COMMENT) ||
          env.V6X-SUMMARY-MAP-ABS <= fromJSON(env.MIN_FLASH_NEG_DIFF_FOR_COMMENT)
        uses: actions/github-script@v7
        env:
          V5X_SUMMARY_MAP_ABS: ${{ env.V5X-SUMMARY-MAP-ABS }}
          V5X_SUMMARY_MAP_PERC: ${{ env.V5X-SUMMARY-MAP-PERC }}
          V6X_SUMMARY_MAP_ABS: ${{ env.V6X-SUMMARY-MAP-ABS }}
          V6X_SUMMARY_MAP_PERC: ${{ env.V6X-SUMMARY-MAP-PERC }}
          PX4_FMU_V5X_OUTPUT: ${{ needs.analyze_flash.outputs.px4_fmu-v5x-bloaty-output }}
          PX4_FMU_V6X_OUTPUT: ${{ needs.analyze_flash.outputs.px4_fmu-v6x-bloaty-output }}
          BUILD_TIME: ${{ steps.bt.outputs.timestamp }}
        with:
          script: |
            const body = `## ðŸ”Ž FLASH Analysis
            <details>
              <summary>px4_fmu-v5x [Total VM Diff: ${process.env.V5X_SUMMARY_MAP_ABS} byte (${process.env.V5X_SUMMARY_MAP_PERC} %)]</summary>

              \`\`\`
              ${process.env.PX4_FMU_V5X_OUTPUT}
              \`\`\`
            </details>

            <details>
              <summary>px4_fmu-v6x [Total VM Diff: ${process.env.V6X_SUMMARY_MAP_ABS} byte (${process.env.V6X_SUMMARY_MAP_PERC} %)]</summary>

              \`\`\`
              ${process.env.PX4_FMU_V6X_OUTPUT}
              \`\`\`
            </details>

            **Updated: _${process.env.BUILD_TIME}_**`;

            // Get PR details to determine correct repository
            const prRepo = {
              owner: context.payload.pull_request.base.repo.owner.login,
              repo: context.payload.pull_request.base.repo.name,
            };

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              ...prRepo,
              issue_number: context.payload.pull_request.number
            });

            const flashComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('FLASH Analysis')
            );

            if (flashComment) {
              await github.rest.issues.updateComment({
                ...prRepo,
                comment_id: flashComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                ...prRepo,
                issue_number: context.payload.pull_request.number,
                body: body
              });
            }
